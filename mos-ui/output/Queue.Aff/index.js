// Generated by purs version 0.11.7
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Bind = require("../Control.Bind");
var Control_Monad_Aff = require("../Control.Monad.Aff");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Ref = require("../Control.Monad.Eff.Ref");
var Data_Either = require("../Data.Either");
var Data_Functor = require("../Data.Functor");
var Prelude = require("../Prelude");
var Queue_Internal = require("../Queue.Internal");
var IOQueues = function (x) {
    return x;
};
var registerSyncOnce = function (v) {
    return function (f) {
        return Queue_Internal.onceQueue(v.input)(function (x) {
            return Control_Bind.bindFlipped(Control_Monad_Eff.bindEff)(Queue_Internal.putQueue(v.output))(f(x));
        });
    };
};
var registerSync = function (v) {
    return function (f) {
        return Queue_Internal.onQueue(v.input)(function (x) {
            return Control_Bind.bindFlipped(Control_Monad_Eff.bindEff)(Queue_Internal.putQueue(v.output))(f(x));
        });
    };
};
var newIOQueues = function __do() {
    var v = Data_Functor.map(Control_Monad_Eff.functorEff)(Queue_Internal.readOnly)(Queue_Internal.newQueue)();
    var v1 = Data_Functor.map(Control_Monad_Eff.functorEff)(Queue_Internal.writeOnly)(Queue_Internal.newQueue)();
    return {
        input: v,
        output: v1
    };
};
var callAsync = function (v) {
    return function (x) {
        return Control_Monad_Aff.makeAff(function (resolve) {
            return function __do() {
                Queue_Internal.onceQueue(Queue_Internal.allowReading(v.output))(function (y) {
                    return resolve(new Data_Either.Right(y));
                })();
                Queue_Internal.putQueue(Queue_Internal.allowWriting(v.input))(x)();
                return Control_Monad_Aff.nonCanceler;
            };
        });
    };
};
module.exports = {
    IOQueues: IOQueues,
    newIOQueues: newIOQueues,
    callAsync: callAsync,
    registerSyncOnce: registerSyncOnce,
    registerSync: registerSync
};
