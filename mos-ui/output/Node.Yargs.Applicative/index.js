// Generated by purs version 0.11.7
"use strict";
var Control_Alt = require("../Control.Alt");
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Console = require("../Control.Monad.Eff.Console");
var Control_Monad_Eff_Exception = require("../Control.Monad.Eff.Exception");
var Control_Monad_Except = require("../Control.Monad.Except");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans");
var Data_Either = require("../Data.Either");
var Data_Foldable = require("../Data.Foldable");
var Data_Foreign = require("../Data.Foreign");
var Data_Foreign_Index = require("../Data.Foreign.Index");
var Data_Functor = require("../Data.Functor");
var Data_Identity = require("../Data.Identity");
var Data_List_Types = require("../Data.List.Types");
var Data_Maybe = require("../Data.Maybe");
var Data_Monoid = require("../Data.Monoid");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Data_Traversable = require("../Data.Traversable");
var Node_Yargs = require("../Node.Yargs");
var Node_Yargs_Setup = require("../Node.Yargs.Setup");
var Prelude = require("../Prelude");
var Y = function (x) {
    return x;
};
var Arg = function (arg) {
    this.arg = arg;
};
var unY = function (v) {
    return v;
};
var runY = function (setup) {
    return function (v) {
        return function __do() {
            var v1 = Node_Yargs.runYargs(Data_Semigroup.append(Node_Yargs_Setup.semigroupYargsSetup)(setup)(v.setup))();
            var v2 = Control_Monad_Except.runExcept(v.read(v1));
            if (v2 instanceof Data_Either.Left) {
                return Control_Monad_Eff_Exception.throwException(Control_Monad_Eff_Exception.error(Data_Show.show(Data_List_Types.showNonEmptyList(Data_Foreign.showForeignError))(v2.value0)))();
            };
            if (v2 instanceof Data_Either.Right) {
                return v2.value0();
            };
            throw new Error("Failed pattern match at Node.Yargs.Applicative line 57, column 3 - line 59, column 27: " + [ v2.constructor.name ]);
        };
    };
};
var rest = {
    setup: Data_Monoid.mempty(Node_Yargs_Setup.monoidYargsSetup),
    read: Control_Bind.composeKleisli(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Foreign_Index.readProp("_"))(Data_Foreign.readArray)
};
var readOneOrMany = function (f) {
    return function (key) {
        return function (value) {
            return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Foreign_Index.readProp(key)(value))(function (v) {
                return Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Data_List_Types.semigroupNonEmptyList)(Data_Identity.monadIdentity))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Control_Applicative.pure(Control_Applicative.applicativeArray))(f(v)))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Foreign.readArray(v))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(f)));
            });
        };
    };
};
var functorY = new Data_Functor.Functor(function (f) {
    return function (v) {
        return {
            setup: v.setup,
            read: function (value) {
                return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(f)(v.read(value));
            }
        };
    };
});
var argStrings = new Arg(function (key) {
    return {
        setup: Node_Yargs_Setup.string(key),
        read: readOneOrMany(Data_Foreign.readString)(key)
    };
});
var argString = new Arg(function (key) {
    return {
        setup: Node_Yargs_Setup.string(key),
        read: Control_Bind.composeKleisli(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Foreign_Index.readProp(key))(Data_Foreign.readString)
    };
});
var argNumbers = new Arg(function (key) {
    return {
        setup: Data_Monoid.mempty(Node_Yargs_Setup.monoidYargsSetup),
        read: readOneOrMany(Data_Foreign.readNumber)(key)
    };
});
var argNumber = new Arg(function (key) {
    return {
        setup: Data_Monoid.mempty(Node_Yargs_Setup.monoidYargsSetup),
        read: Control_Bind.composeKleisli(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Foreign_Index.readProp(key))(Data_Foreign.readNumber)
    };
});
var argInt = new Arg(function (key) {
    return {
        setup: Data_Monoid.mempty(Node_Yargs_Setup.monoidYargsSetup),
        read: Control_Bind.composeKleisli(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Foreign_Index.readProp(key))(Data_Foreign.readInt)
    };
});
var argBooleans = new Arg(function (key) {
    return {
        setup: Node_Yargs_Setup["boolean"](key),
        read: readOneOrMany(Data_Foreign.readBoolean)(key)
    };
});
var argBoolean = new Arg(function (key) {
    return {
        setup: Node_Yargs_Setup["boolean"](key),
        read: Control_Bind.composeKleisli(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Foreign_Index.readProp(key))(Data_Foreign.readBoolean)
    };
});
var arg = function (dict) {
    return dict.arg;
};
var yarg = function (dictArg) {
    return function (key) {
        return function (aliases) {
            return function (desc) {
                return function (required) {
                    return function (needArg) {
                        var y = unY(arg(dictArg)(key));
                        return {
                            setup: Data_Semigroup.append(Node_Yargs_Setup.semigroupYargsSetup)(y.setup)(Data_Semigroup.append(Node_Yargs_Setup.semigroupYargsSetup)(Data_Foldable.foldMap(Data_Foldable.foldableArray)(Node_Yargs_Setup.monoidYargsSetup)(function (a) {
                                return Node_Yargs_Setup.alias(key)(a);
                            })(aliases))(Data_Semigroup.append(Node_Yargs_Setup.semigroupYargsSetup)(Data_Foldable.foldMap(Data_Either.foldableEither)(Node_Yargs_Setup.monoidYargsSetup)(function (m) {
                                return Node_Yargs_Setup.demand(key)(m);
                            })(required))(Data_Semigroup.append(Node_Yargs_Setup.semigroupYargsSetup)(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Node_Yargs_Setup.monoidYargsSetup)(function (s) {
                                return Node_Yargs_Setup.describe(key)(s);
                            })(desc))((function () {
                                if (needArg) {
                                    return Node_Yargs_Setup.requiresArg(key);
                                };
                                return Data_Monoid.mempty(Node_Yargs_Setup.monoidYargsSetup);
                            })())))),
                            read: (function () {
                                if (required instanceof Data_Either.Left) {
                                    return function (value) {
                                        return Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Data_List_Types.semigroupNonEmptyList)(Data_Identity.monadIdentity))(y.read(value))(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(required.value0));
                                    };
                                };
                                return y.read;
                            })()
                        };
                    };
                };
            };
        };
    };
};
var flag = function (key) {
    return function (aliases) {
        return function (desc) {
            return yarg(argBoolean)(key)(aliases)(desc)(new Data_Either.Left(false))(false);
        };
    };
};
var applyT = new Control_Apply.Apply(function () {
    return functorY;
}, function (v) {
    return function (v1) {
        return {
            setup: Data_Semigroup.append(Node_Yargs_Setup.semigroupYargsSetup)(v.setup)(v1.setup),
            read: function (value) {
                return Control_Apply.apply(Control_Monad_Except_Trans.applyExceptT(Data_Identity.monadIdentity))(v.read(value))(v1.read(value));
            }
        };
    };
});
var applicativeY = new Control_Applicative.Applicative(function () {
    return applyT;
}, function (a) {
    return {
        setup: Data_Monoid.mempty(Node_Yargs_Setup.monoidYargsSetup),
        read: function (v) {
            return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(a);
        }
    };
});
module.exports = {
    runY: runY,
    Arg: Arg,
    arg: arg,
    yarg: yarg,
    flag: flag,
    rest: rest,
    functorY: functorY,
    applyT: applyT,
    applicativeY: applicativeY,
    argString: argString,
    argBoolean: argBoolean,
    argNumber: argNumber,
    argInt: argInt,
    argStrings: argStrings,
    argBooleans: argBooleans,
    argNumbers: argNumbers
};
