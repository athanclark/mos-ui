// Generated by purs version 0.11.7
"use strict";
var Arguments = require("../Arguments");
var Control_Applicative = require("../Control.Applicative");
var Control_Bind = require("../Control.Bind");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Exception = require("../Control.Monad.Eff.Exception");
var Control_Monad_Eff_Ref = require("../Control.Monad.Eff.Ref");
var DBus = require("../DBus");
var Data_Argonaut = require("../Data.Argonaut");
var Data_Argonaut_Core = require("../Data.Argonaut.Core");
var Data_Argonaut_Decode_Class = require("../Data.Argonaut.Decode.Class");
var Data_Argonaut_Decode_Combinators = require("../Data.Argonaut.Decode.Combinators");
var Data_Argonaut_Encode_Class = require("../Data.Argonaut.Encode.Class");
var Data_Argonaut_Encode_Combinators = require("../Data.Argonaut.Encode.Combinators");
var Data_Either = require("../Data.Either");
var Data_Function = require("../Data.Function");
var Data_Maybe = require("../Data.Maybe");
var Prelude = require("../Prelude");
var Queue_Internal = require("../Queue.Internal");
var Types_DBus = require("../Types.DBus");
var EnvData = function (x) {
    return x;
};
var Env = function (x) {
    return x;
};
var toEnvData = function (v) {
    return {
        development: v.development,
        monerodService: v.monerodService
    };
};
var mkEnv = function (v) {
    return function __do() {
        var v1 = DBus.connectSession();
        if (v1 instanceof Data_Maybe.Nothing) {
            return Control_Monad_Eff_Exception["throw"]("Couldn't connect to dbus!")();
        };
        if (v1 instanceof Data_Maybe.Just) {
            var v2 = Queue_Internal.newQueue();
            return {
                development: v.development,
                client: v1.value0,
                signalQueue: v2,
                monerodService: v.monerodService
            };
        };
        throw new Error("Failed pattern match at Types.Env line 58, column 3 - line 62, column 64: " + [ v1.constructor.name ]);
    };
};
var getEnvData = function (v) {
    return v;
};
var encodeJsonEnvData = new Data_Argonaut_Encode_Class.EncodeJson(function (v) {
    return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJBoolean)("development")(v.development))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("monerodService")(v.monerodService))(Data_Argonaut_Core.jsonEmptyObject));
});
var decodeJsonEnvData = new Data_Argonaut_Decode_Class.DecodeJson(function (json) {
    return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeStrMap(Data_Argonaut_Decode_Class.decodeJsonJson))(json))(function (v) {
        return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonBoolean)(v)("development"))(function (v1) {
            return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(v)("monerodService"))(function (v2) {
                return Control_Applicative.pure(Data_Either.applicativeEither)({
                    development: v1,
                    monerodService: v2
                });
            });
        });
    });
});
module.exports = {
    Env: Env,
    EnvData: EnvData,
    getEnvData: getEnvData,
    toEnvData: toEnvData,
    mkEnv: mkEnv,
    encodeJsonEnvData: encodeJsonEnvData,
    decodeJsonEnvData: decodeJsonEnvData
};
