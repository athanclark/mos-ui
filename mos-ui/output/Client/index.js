// Generated by purs version 0.11.6
"use strict";
var Client_Constants = require("../Client.Constants");
var Control_Applicative = require("../Control.Applicative");
var Control_Bind = require("../Control.Bind");
var Control_Monad_Aff = require("../Control.Monad.Aff");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Class = require("../Control.Monad.Eff.Class");
var Control_Monad_Eff_Console = require("../Control.Monad.Eff.Console");
var Control_Monad_Eff_Exception = require("../Control.Monad.Eff.Exception");
var Control_Monad_Eff_Ref = require("../Control.Monad.Eff.Ref");
var Control_Monad_Eff_Unsafe = require("../Control.Monad.Eff.Unsafe");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class");
var DBus = require("../DBus");
var DBus_Signature = require("../DBus.Signature");
var Data_Argonaut = require("../Data.Argonaut");
var Data_Argonaut_Core = require("../Data.Argonaut.Core");
var Data_Argonaut_Decode_Class = require("../Data.Argonaut.Decode.Class");
var Data_Argonaut_Encode_Class = require("../Data.Argonaut.Encode.Class");
var Data_Argonaut_Parser = require("../Data.Argonaut.Parser");
var Data_Either = require("../Data.Either");
var Data_Function = require("../Data.Function");
var Data_Functor_Singleton = require("../Data.Functor.Singleton");
var Data_Maybe = require("../Data.Maybe");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Data_Traversable = require("../Data.Traversable");
var Data_Unit = require("../Data.Unit");
var Electron = require("../Electron");
var Electron_Main = require("../Electron.Main");
var Node_Process = require("../Node.Process");
var Prelude = require("../Prelude");
var Queue = require("../Queue");
var Signal_Channel = require("../Signal.Channel");
var Types = require("../Types");
var Types_DBus = require("../Types.DBus");
var Types_Env = require("../Types.Env");
var Unsafe_Coerce = require("../Unsafe.Coerce");
var monerodoClient = function (dictMonadApp) {
    return Control_Bind.bind((((dictMonadApp.MonadBaseControl2()).MonadBase0()).Monad1()).Bind1())(Control_Monad_Reader_Class.ask((dictMonadApp.MonadReader1()).MonadAsk0()))(function (v) {
        return Control_Bind.discard(Control_Bind.discardUnit)((((dictMonadApp.MonadBaseControl2()).MonadBase0()).Monad1()).Bind1())(Control_Monad_Eff_Class.liftEff(dictMonadApp.MonadEff0())(Electron_Main.registerAsyncHandler({
            channel: Client_Constants.controlInput, 
            handle: function (v1) {
                var v2 = Data_Argonaut_Decode_Class.decodeJson(Types_DBus.decodeJsonControlInput)(v1.message);
                if (v2 instanceof Data_Either.Left) {
                    return Control_Monad_Eff_Console.warn("couldn't decode electron message: " + Data_Show.show(Data_Show.showString)(v2.value0));
                };
                if (v2 instanceof Data_Either.Right) {
                    var resolve = function (v3) {
                        if (v3 instanceof Data_Either.Left) {
                            return Control_Monad_Eff_Exception.throwException(v3.value0);
                        };
                        return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                    };
                    return Control_Monad_Aff.runAff_(resolve)(Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff.attempt(DBus.call(Types_DBus.isVariantControlOutput)(v.client)(Client_Constants.monerodoBus)(Client_Constants.monerodoObject)(Client_Constants.monerodoControl)(Client_Constants.monerodoControlMethod)(DBus.arg(Types_DBus.isValueControlInput)(DBus.nil)(v2.value0))))(function (v3) {
                        if (v3 instanceof Data_Either.Left) {
                            return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Console.warn(Data_Show.show(Control_Monad_Eff_Exception.showError)(v3.value0)));
                        };
                        if (v3 instanceof Data_Either.Right) {
                            return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(v1.send({
                                channel: Client_Constants.controlOutput, 
                                message: Data_Argonaut_Encode_Class.encodeJson(Types_DBus.encodeJsonControlOutput)(v3.value0)
                            }));
                        };
                        throw new Error("Failed pattern match at Client line 53, column 17 - line 59, column 24: " + [ v3.constructor.name ]);
                    }));
                };
                throw new Error("Failed pattern match at Client line 46, column 34 - line 59, column 24: " + [ v2.constructor.name ]);
            }
        })))(function () {
            return Control_Bind.discard(Control_Bind.discardUnit)((((dictMonadApp.MonadBaseControl2()).MonadBase0()).Monad1()).Bind1())(Control_Monad_Eff_Class.liftEff(dictMonadApp.MonadEff0())(Electron_Main.registerAsyncHandler({
                channel: Client_Constants.signalOutput, 
                handle: function (v1) {
                    var v2 = Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeJsonNull)(v1.message);
                    if (v2 instanceof Data_Either.Left) {
                        return Control_Monad_Eff_Console.warn("couldn't decode electron message: " + Data_Show.show(Data_Show.showString)(v2.value0));
                    };
                    if (v2 instanceof Data_Either.Right) {
                        var resolve = function (v3) {
                            if (v3 instanceof Data_Either.Left) {
                                return Control_Monad_Eff_Exception.throwException(v3.value0);
                            };
                            return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                        };
                        return Control_Monad_Aff.runAff_(resolve)(Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff.attempt(DBus.call(DBus_Signature.isVariantArray(DBus_Signature.isVariantString))(v.client)(Client_Constants.monerodoBus)(Client_Constants.monerodoObject)(Client_Constants.monerodoControl)(Client_Constants.monerodoSignalMethod)(DBus.nil)))(function (v3) {
                            if (v3 instanceof Data_Either.Left) {
                                return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Console.warn(Data_Show.show(Control_Monad_Eff_Exception.showError)(v3.value0)));
                            };
                            if (v3 instanceof Data_Either.Right) {
                                var v4 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Data_Argonaut_Parser.jsonParser)(v3.value0);
                                if (v4 instanceof Data_Either.Left) {
                                    return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Console.warn(v4.value0));
                                };
                                if (v4 instanceof Data_Either.Right) {
                                    return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(function __do() {
                                        var v5 = Control_Monad_Eff_Unsafe.unsafeCoerceEff(Control_Monad_Eff_Exception["try"](v1.send({
                                            channel: Client_Constants.signalOutput, 
                                            message: Data_Argonaut_Core.fromArray(v4.value0)
                                        })))();
                                        if (v5 instanceof Data_Either.Left) {
                                            return Control_Monad_Eff_Console.warn(Data_Show.show(Control_Monad_Eff_Exception.showError)(v5.value0))();
                                        };
                                        if (v5 instanceof Data_Either.Right) {
                                            return Data_Unit.unit;
                                        };
                                        throw new Error("Failed pattern match at Client line 81, column 27 - line 83, column 49: " + [ v5.constructor.name ]);
                                    });
                                };
                                throw new Error("Failed pattern match at Client line 73, column 21 - line 83, column 49: " + [ v4.constructor.name ]);
                            };
                            throw new Error("Failed pattern match at Client line 70, column 17 - line 83, column 49: " + [ v3.constructor.name ]);
                        }));
                    };
                    throw new Error("Failed pattern match at Client line 63, column 34 - line 83, column 49: " + [ v2.constructor.name ]);
                }
            })))(function () {
                return Data_Functor_Singleton.liftBaseWith_(dictMonadApp.MonadBaseControl2())(dictMonadApp.SingletonFunctor3())(Control_Monad_Eff.functorEff)(function (runInBase) {
                    return Electron_Main.registerAsyncHandler({
                        channel: Client_Constants.envOutput, 
                        handle: function (v1) {
                            var v2 = Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeJsonNull)(v1.message);
                            if (v2 instanceof Data_Either.Left) {
                                return Control_Monad_Eff_Console.warn("couldn't decode electron message: " + Data_Show.show(Data_Show.showString)(v2.value0));
                            };
                            if (v2 instanceof Data_Either.Right) {
                                return function __do() {
                                    var v3 = runInBase(Control_Monad_Reader_Class.ask((dictMonadApp.MonadReader1()).MonadAsk0()))();
                                    return Control_Monad_Eff_Class.liftEff(Control_Monad_Eff_Class.monadEffEff)(v1.send({
                                        channel: Client_Constants.envOutput, 
                                        message: Data_Argonaut_Encode_Class.encodeJson(Types_Env.encodeJsonEnvData)(Types_Env.toEnvData(v3))
                                    }))();
                                };
                            };
                            throw new Error("Failed pattern match at Client line 87, column 34 - line 94, column 14: " + [ v2.constructor.name ]);
                        }
                    });
                });
            });
        });
    });
};
module.exports = {
    monerodoClient: monerodoClient
};
