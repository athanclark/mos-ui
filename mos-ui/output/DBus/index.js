// Generated by purs version 0.11.6
"use strict";
var $foreign = require("./foreign");
var Control_Applicative = require("../Control.Applicative");
var Control_Bind = require("../Control.Bind");
var Control_Monad_Aff = require("../Control.Monad.Aff");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Exception = require("../Control.Monad.Eff.Exception");
var Control_Monad_Eff_Uncurried = require("../Control.Monad.Eff.Uncurried");
var DBus_Signature = require("../DBus.Signature");
var Data_Array = require("../Data.Array");
var Data_Either = require("../Data.Either");
var Data_Foldable = require("../Data.Foldable");
var Data_Foreign = require("../Data.Foreign");
var Data_Function = require("../Data.Function");
var Data_Function_Uncurried = require("../Data.Function.Uncurried");
var Data_Functor = require("../Data.Functor");
var Data_Maybe = require("../Data.Maybe");
var Data_Monoid = require("../Data.Monoid");
var Data_Nullable = require("../Data.Nullable");
var Data_Semigroup = require("../Data.Semigroup");
var Data_StrMap = require("../Data.StrMap");
var Data_Traversable = require("../Data.Traversable");
var Data_Tuple = require("../Data.Tuple");
var Prelude = require("../Prelude");
var Type_Proxy = require("../Type.Proxy");
var ObjectPath = function (x) {
    return x;
};
var MemberName = function (x) {
    return x;
};
var InterfaceName = function (x) {
    return x;
};
var BusName = function (x) {
    return x;
};
var signalDesc = Data_Function_Uncurried.runFn2($foreign.signalDescImpl);
var on = function (dictIsVariant) {
    return function (i) {
        return function (m) {
            return function (f) {
                return Control_Monad_Eff_Uncurried.runEffFn3($foreign.onImpl)(i)(m)(Control_Monad_Eff_Uncurried.mkEffFn1(function (v) {
                    return f(DBus_Signature.fromVariant(dictIsVariant)(v));
                }));
            };
        };
    };
};
var nil = new Data_Tuple.Tuple(Data_Monoid.mempty(DBus_Signature.monoidSignature), [  ]);
var getService = function (c) {
    return function (b) {
        return Data_Nullable.toMaybe($foreign.getServiceImpl(c, b));
    };
};
var getInterface = function (s) {
    return function (o) {
        return function (i) {
            return Control_Monad_Aff.makeAff(function (evoke) {
                return function __do() {
                    Control_Monad_Eff_Uncurried.runEffFn4($foreign.getInterfaceImpl)(s)(o)(i)(Control_Monad_Eff_Uncurried.mkEffFn2(function (mE) {
                        return function (i$prime) {
                            var v = Data_Nullable.toMaybe(mE);
                            if (v instanceof Data_Maybe.Nothing) {
                                return evoke(new Data_Either.Right(i$prime));
                            };
                            if (v instanceof Data_Maybe.Just) {
                                return evoke(new Data_Either.Left(v.value0));
                            };
                            throw new Error("Failed pattern match at DBus line 75, column 59 - line 77, column 32: " + [ v.constructor.name ]);
                        };
                    }))();
                    return Control_Monad_Aff.nonCanceler;
                };
            });
        };
    };
};
var exportInterface = Control_Monad_Eff_Uncurried.runEffFn3($foreign.exportInterfaceImpl);
var connectSession = Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign.connectSessionImpl);
var call = function (dictIsVariant) {
    return function (c) {
        return function (b) {
            return function (o) {
                return function (i) {
                    return function (v) {
                        return function (v1) {
                            return Control_Monad_Aff.makeAff(function (evoke) {
                                return function __do() {
                                    Control_Monad_Eff_Uncurried.runEffFn8($foreign.callImpl)(c)(b)(o)(i)(v)(v1.value0)(v1.value1)(Control_Monad_Eff_Uncurried.mkEffFn2(function (mE) {
                                        return function (v2) {
                                            var v3 = Data_Nullable.toMaybe(mE);
                                            if (v3 instanceof Data_Maybe.Nothing) {
                                                var v4 = DBus_Signature.fromVariant(dictIsVariant)(v2);
                                                if (v4 instanceof Data_Either.Left) {
                                                    return evoke(Data_Either.Left.create(Control_Monad_Eff_Exception.error("Could not marshall return variant into type: " + (Data_Foreign.typeOf(Data_Foreign.toForeign(v2)) + ("; " + ($foreign.stringify(v2) + ("; " + v4.value0)))))));
                                                };
                                                if (v4 instanceof Data_Either.Right) {
                                                    return evoke(new Data_Either.Right(v4.value0));
                                                };
                                                throw new Error("Failed pattern match at DBus line 111, column 20 - line 113, column 37: " + [ v4.constructor.name ]);
                                            };
                                            if (v3 instanceof Data_Maybe.Just) {
                                                return Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(function (e) {
                                                    return evoke(new Data_Either.Left(e));
                                                })(v3.value0);
                                            };
                                            throw new Error("Failed pattern match at DBus line 110, column 7 - line 114, column 55: " + [ v3.constructor.name ]);
                                        };
                                    }))();
                                    return Control_Monad_Aff.nonCanceler;
                                };
                            });
                        };
                    };
                };
            };
        };
    };
};
var arg = function (dictIsValue) {
    return function (v) {
        return function (x) {
            var s$prime = DBus_Signature.typeCode(DBus_Signature.typeOf(dictIsValue)(Type_Proxy["Proxy"].value));
            return new Data_Tuple.Tuple(Data_Semigroup.append(DBus_Signature.semigroupSignature)(v.value0)(s$prime), Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.value1)([ DBus_Signature.toVariant(dictIsValue.IsVariant0())(x) ]));
        };
    };
};
module.exports = {
    BusName: BusName, 
    InterfaceName: InterfaceName, 
    MemberName: MemberName, 
    ObjectPath: ObjectPath, 
    arg: arg, 
    call: call, 
    connectSession: connectSession, 
    exportInterface: exportInterface, 
    getInterface: getInterface, 
    getService: getService, 
    nil: nil, 
    on: on, 
    signalDesc: signalDesc
};
