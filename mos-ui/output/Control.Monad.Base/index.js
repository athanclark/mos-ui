// Generated by purs version 0.11.6
"use strict";
var Control_Category = require("../Control.Category");
var Control_Monad = require("../Control.Monad");
var Control_Monad_Aff = require("../Control.Monad.Aff");
var Control_Monad_Cont_Trans = require("../Control.Monad.Cont.Trans");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Class = require("../Control.Monad.Eff.Class");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans");
var Control_Monad_Free_Trans = require("../Control.Monad.Free.Trans");
var Control_Monad_List_Trans = require("../Control.Monad.List.Trans");
var Control_Monad_Maybe_Trans = require("../Control.Monad.Maybe.Trans");
var Control_Monad_RWS_Trans = require("../Control.Monad.RWS.Trans");
var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans");
var Control_Monad_State_Trans = require("../Control.Monad.State.Trans");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class");
var Control_Monad_Writer_Trans = require("../Control.Monad.Writer.Trans");
var Data_Either = require("../Data.Either");
var Data_Identity = require("../Data.Identity");
var Data_List = require("../Data.List");
var Data_List_Types = require("../Data.List.Types");
var Data_Maybe = require("../Data.Maybe");
var Data_Monoid = require("../Data.Monoid");
var Data_Tuple = require("../Data.Tuple");
var Prelude = require("../Prelude");
var MonadBase = function (Monad0, Monad1, liftBase) {
    this.Monad0 = Monad0;
    this.Monad1 = Monad1;
    this.liftBase = liftBase;
};
var tupleMonadBase = function (dictMonoid) {
    return new MonadBase(function () {
        return Data_Tuple.monadTuple(dictMonoid);
    }, function () {
        return Data_Tuple.monadTuple(dictMonoid);
    }, Control_Category.id(Control_Category.categoryFn));
};
var maybeMonadBase = new MonadBase(function () {
    return Data_Maybe.monadMaybe;
}, function () {
    return Data_Maybe.monadMaybe;
}, Control_Category.id(Control_Category.categoryFn));
var listMonadBase = new MonadBase(function () {
    return Data_List_Types.monadList;
}, function () {
    return Data_List_Types.monadList;
}, Control_Category.id(Control_Category.categoryFn));
var liftBase = function (dict) {
    return dict.liftBase;
};
var listTMonadBase = function (dictMonadBase) {
    return function (dictMonad) {
        return function (dictMonad1) {
            return new MonadBase(function () {
                return dictMonad1;
            }, function () {
                return Control_Monad_List_Trans.monadListT(dictMonad);
            }, function (x) {
                return Control_Monad_Trans_Class.lift(Control_Monad_List_Trans.monadTransListT)(dictMonad)(liftBase(dictMonadBase)(x));
            });
        };
    };
};
var maybeTMonadBase = function (dictMonadBase) {
    return function (dictMonad) {
        return function (dictMonad1) {
            return new MonadBase(function () {
                return dictMonad1;
            }, function () {
                return Control_Monad_Maybe_Trans.monadMaybeT(dictMonad);
            }, function (x) {
                return Control_Monad_Trans_Class.lift(Control_Monad_Maybe_Trans.monadTransMaybeT)(dictMonad)(liftBase(dictMonadBase)(x));
            });
        };
    };
};
var readerTMonadBase = function (dictMonadBase) {
    return function (dictMonad) {
        return function (dictMonad1) {
            return new MonadBase(function () {
                return dictMonad1;
            }, function () {
                return Control_Monad_Reader_Trans.monadReaderT(dictMonad);
            }, function (x) {
                return Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(dictMonad)(liftBase(dictMonadBase)(x));
            });
        };
    };
};
var rwsTMonadBase = function (dictMonadBase) {
    return function (dictMonad) {
        return function (dictMonad1) {
            return function (dictMonoid) {
                return new MonadBase(function () {
                    return dictMonad1;
                }, function () {
                    return Control_Monad_RWS_Trans.monadRWST(dictMonad)(dictMonoid);
                }, function (x) {
                    return Control_Monad_Trans_Class.lift(Control_Monad_RWS_Trans.monadTransRWST(dictMonoid))(dictMonad)(liftBase(dictMonadBase)(x));
                });
            };
        };
    };
};
var stateTMonadBase = function (dictMonadBase) {
    return function (dictMonad) {
        return function (dictMonad1) {
            return new MonadBase(function () {
                return dictMonad1;
            }, function () {
                return Control_Monad_State_Trans.monadStateT(dictMonad);
            }, function (x) {
                return Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(dictMonad)(liftBase(dictMonadBase)(x));
            });
        };
    };
};
var writerTMonadBase = function (dictMonadBase) {
    return function (dictMonad) {
        return function (dictMonad1) {
            return function (dictMonoid) {
                return new MonadBase(function () {
                    return dictMonad1;
                }, function () {
                    return Control_Monad_Writer_Trans.monadWriterT(dictMonoid)(dictMonad);
                }, function (x) {
                    return Control_Monad_Trans_Class.lift(Control_Monad_Writer_Trans.monadTransWriterT(dictMonoid))(dictMonad)(liftBase(dictMonadBase)(x));
                });
            };
        };
    };
};
var identityMonadBase = new MonadBase(function () {
    return Data_Identity.monadIdentity;
}, function () {
    return Data_Identity.monadIdentity;
}, Control_Category.id(Control_Category.categoryFn));
var functionMonadBase = new MonadBase(function () {
    return Control_Monad.monadFn;
}, function () {
    return Control_Monad.monadFn;
}, Control_Category.id(Control_Category.categoryFn));
var freeTMonadBase = function (dictMonadBase) {
    return function (dictMonad) {
        return function (dictMonad1) {
            return function (dictFunctor) {
                return new MonadBase(function () {
                    return dictMonad1;
                }, function () {
                    return Control_Monad_Free_Trans.monadFreeT(dictFunctor)(dictMonad);
                }, function (x) {
                    return Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(dictFunctor))(dictMonad)(liftBase(dictMonadBase)(x));
                });
            };
        };
    };
};
var exceptTMonadBase = function (dictMonadBase) {
    return function (dictMonad) {
        return function (dictMonad1) {
            return new MonadBase(function () {
                return dictMonad1;
            }, function () {
                return Control_Monad_Except_Trans.monadExceptT(dictMonad);
            }, function (x) {
                return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(dictMonad)(liftBase(dictMonadBase)(x));
            });
        };
    };
};
var eitherMonadBase = new MonadBase(function () {
    return Data_Either.monadEither;
}, function () {
    return Data_Either.monadEither;
}, Control_Category.id(Control_Category.categoryFn));
var effMonadBase = new MonadBase(function () {
    return Control_Monad_Eff.monadEff;
}, function () {
    return Control_Monad_Eff.monadEff;
}, Control_Category.id(Control_Category.categoryFn));
var contTMonadBase = function (dictMonadBase) {
    return function (dictMonad) {
        return function (dictMonad1) {
            return new MonadBase(function () {
                return dictMonad1;
            }, function () {
                return Control_Monad_Cont_Trans.monadContT(dictMonad);
            }, function (x) {
                return Control_Monad_Trans_Class.lift(Control_Monad_Cont_Trans.monadTransContT)(dictMonad)(liftBase(dictMonadBase)(x));
            });
        };
    };
};
var arrayMonadBase = new MonadBase(function () {
    return Control_Monad.monadArray;
}, function () {
    return Control_Monad.monadArray;
}, Control_Category.id(Control_Category.categoryFn));
var affMonadBase = new MonadBase(function () {
    return Control_Monad_Aff.monadAff;
}, function () {
    return Control_Monad_Aff.monadAff;
}, Control_Category.id(Control_Category.categoryFn));
module.exports = {
    MonadBase: MonadBase, 
    liftBase: liftBase, 
    affMonadBase: affMonadBase, 
    effMonadBase: effMonadBase, 
    eitherMonadBase: eitherMonadBase, 
    tupleMonadBase: tupleMonadBase, 
    maybeMonadBase: maybeMonadBase, 
    identityMonadBase: identityMonadBase, 
    listMonadBase: listMonadBase, 
    arrayMonadBase: arrayMonadBase, 
    functionMonadBase: functionMonadBase, 
    readerTMonadBase: readerTMonadBase, 
    writerTMonadBase: writerTMonadBase, 
    stateTMonadBase: stateTMonadBase, 
    contTMonadBase: contTMonadBase, 
    exceptTMonadBase: exceptTMonadBase, 
    listTMonadBase: listTMonadBase, 
    maybeTMonadBase: maybeTMonadBase, 
    rwsTMonadBase: rwsTMonadBase, 
    freeTMonadBase: freeTMonadBase
};
