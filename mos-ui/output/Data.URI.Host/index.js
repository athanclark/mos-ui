// Generated by purs version 0.11.7
"use strict";
var Control_Alt = require("../Control.Alt");
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Eq = require("../Data.Eq");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_Generic_Rep = require("../Data.Generic.Rep");
var Data_Generic_Rep_Show = require("../Data.Generic.Rep.Show");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Int = require("../Data.Int");
var Data_Lens = require("../Data.Lens");
var Data_Lens_Prism = require("../Data.Lens.Prism");
var Data_Maybe = require("../Data.Maybe");
var Data_Ord = require("../Data.Ord");
var Data_Ordering = require("../Data.Ordering");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Data_Symbol = require("../Data.Symbol");
var Data_URI_Common = require("../Data.URI.Common");
var Global = require("../Global");
var Prelude = require("../Prelude");
var Text_Parsing_StringParser = require("../Text.Parsing.StringParser");
var Text_Parsing_StringParser_Combinators = require("../Text.Parsing.StringParser.Combinators");
var Text_Parsing_StringParser_String = require("../Text.Parsing.StringParser.String");
var IPv6Address = (function () {
    function IPv6Address(value0) {
        this.value0 = value0;
    };
    IPv6Address.create = function (value0) {
        return new IPv6Address(value0);
    };
    return IPv6Address;
})();
var IPv4Address = (function () {
    function IPv4Address(value0) {
        this.value0 = value0;
    };
    IPv4Address.create = function (value0) {
        return new IPv4Address(value0);
    };
    return IPv4Address;
})();
var NameAddress = (function () {
    function NameAddress(value0) {
        this.value0 = value0;
    };
    NameAddress.create = function (value0) {
        return new NameAddress(value0);
    };
    return NameAddress;
})();
var regNameParser = (function () {
    var p = Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Alt.alt(Text_Parsing_StringParser.altParser)(Data_URI_Common.parseUnreserved)(Data_URI_Common.parsePCTEncoded(Data_URI_Common.decodePCT)))(Data_URI_Common.parseSubDelims);
    return Data_Functor.map(Text_Parsing_StringParser.functorParser)(function ($83) {
        return NameAddress.create(Data_URI_Common.joinWith("")($83));
    })(Text_Parsing_StringParser_Combinators.many1(p));
})();
var print = function (v) {
    if (v instanceof IPv6Address) {
        return "[" + (v.value0 + "]");
    };
    if (v instanceof IPv4Address) {
        return v.value0;
    };
    if (v instanceof NameAddress) {
        return Global["encodeURI"](v.value0);
    };
    throw new Error("Failed pattern match at Data.URI.Host line 70, column 1 - line 70, column 22: " + [ v.constructor.name ]);
};
var ipv6AddressParser = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(IPv6Address.create)(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_String.string("["))(Data_URI_Common.rxPat("[a-f0-9\\.:]+")))(Text_Parsing_StringParser_String.string("]"))))("IPv6 address");
var ipv4AddressParser = (function () {
    var octet = Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Data_URI_Common.rxPat("0|([1-9][0-9]{0,2})"))(function (v) {
        var v1 = Data_Int.fromString(v);
        if (v1 instanceof Data_Maybe.Just && (v1.value0 >= 0 && v1.value0 <= 255)) {
            return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(v1.value0);
        };
        return Text_Parsing_StringParser.fail("Invalid IPv4 address octet");
    });
    var addr = Control_Bind.bind(Text_Parsing_StringParser.bindParser)(octet)(function (v) {
        return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_String["char"]("."))(function (v1) {
            return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(octet)(function (v2) {
                return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_String["char"]("."))(function (v3) {
                    return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(octet)(function (v4) {
                        return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_String["char"]("."))(function (v5) {
                            return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(octet)(function (v6) {
                                return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(Data_Show.show(Data_Show.showInt)(v) + ("." + (Data_Show.show(Data_Show.showInt)(v2) + ("." + (Data_Show.show(Data_Show.showInt)(v4) + ("." + Data_Show.show(Data_Show.showInt)(v6)))))));
                            });
                        });
                    });
                });
            });
        });
    });
    return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(IPv4Address.create)(addr))("IPv4 address");
})();
var parser = Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Alt.alt(Text_Parsing_StringParser.altParser)(ipv6AddressParser)(ipv4AddressParser))(Text_Parsing_StringParser["try"](regNameParser));
var genericHost = new Data_Generic_Rep.Generic(function (x) {
    if (x instanceof IPv6Address) {
        return new Data_Generic_Rep.Inl(x.value0);
    };
    if (x instanceof IPv4Address) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
    };
    if (x instanceof NameAddress) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0));
    };
    throw new Error("Failed pattern match at Data.URI.Host line 35, column 8 - line 35, column 45: " + [ x.constructor.name ]);
}, function (x) {
    if (x instanceof Data_Generic_Rep.Inl) {
        return new IPv6Address(x.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
        return new IPv4Address(x.value0.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inr) {
        return new NameAddress(x.value0.value0);
    };
    throw new Error("Failed pattern match at Data.URI.Host line 35, column 8 - line 35, column 45: " + [ x.constructor.name ]);
});
var showHost = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericHost)(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showString))(new Data_Symbol.IsSymbol(function () {
    return "IPv6Address";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showString))(new Data_Symbol.IsSymbol(function () {
    return "IPv4Address";
})))(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showString))(new Data_Symbol.IsSymbol(function () {
    return "NameAddress";
}))))));
var eqHost = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof IPv6Address && y instanceof IPv6Address) {
            return x.value0 === y.value0;
        };
        if (x instanceof IPv4Address && y instanceof IPv4Address) {
            return x.value0 === y.value0;
        };
        if (x instanceof NameAddress && y instanceof NameAddress) {
            return x.value0 === y.value0;
        };
        return false;
    };
});
var ordHost = new Data_Ord.Ord(function () {
    return eqHost;
}, function (x) {
    return function (y) {
        if (x instanceof IPv6Address && y instanceof IPv6Address) {
            return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
        };
        if (x instanceof IPv6Address) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof IPv6Address) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof IPv4Address && y instanceof IPv4Address) {
            return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
        };
        if (x instanceof IPv4Address) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof IPv4Address) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof NameAddress && y instanceof NameAddress) {
            return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
        };
        throw new Error("Failed pattern match at Data.URI.Host line 34, column 8 - line 34, column 35: " + [ x.constructor.name, y.constructor.name ]);
    };
});
var _NameAddress = function (dictChoice) {
    return Data_Lens_Prism["prism'"](NameAddress.create)(function (v) {
        if (v instanceof NameAddress) {
            return new Data_Maybe.Just(v.value0);
        };
        return Data_Maybe.Nothing.value;
    })(dictChoice);
};
var _IPv6Address = function (dictChoice) {
    return Data_Lens_Prism["prism'"](IPv6Address.create)(function (v) {
        if (v instanceof IPv6Address) {
            return new Data_Maybe.Just(v.value0);
        };
        return Data_Maybe.Nothing.value;
    })(dictChoice);
};
var _IPv4Address = function (dictChoice) {
    return Data_Lens_Prism["prism'"](IPv4Address.create)(function (v) {
        if (v instanceof IPv4Address) {
            return new Data_Maybe.Just(v.value0);
        };
        return Data_Maybe.Nothing.value;
    })(dictChoice);
};
module.exports = {
    IPv6Address: IPv6Address,
    IPv4Address: IPv4Address,
    NameAddress: NameAddress,
    parser: parser,
    ipv6AddressParser: ipv6AddressParser,
    ipv4AddressParser: ipv4AddressParser,
    regNameParser: regNameParser,
    print: print,
    _IPv6Address: _IPv6Address,
    _IPv4Address: _IPv4Address,
    _NameAddress: _NameAddress,
    eqHost: eqHost,
    ordHost: ordHost,
    genericHost: genericHost,
    showHost: showHost
};
